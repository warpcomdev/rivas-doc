---
postgresql_version: "16"
postgrest_version: "v12.0.0"
postgrest_url: https://172.17.121.37/api
postgresql_host: "{{ hostvars['srvbbddunicadb1']['ansible_default_ipv4']['address'] }}"
postgresql_port: 5432
# Settings de pgadmin4
pgadmin4_database: system
pgadmin4_schema: pgadmin4
pgadmin4_user: pgadmin4
# Settings de postgrest
postgrest_database: "{{ pgadmin4_database }}"
postgrest_schema: api
postgrest_api_port: "3000"
postgrest_authenticator_role: authenticator
postgrest_anon_role: web_anon
postgrest_roles:
- group_ayto_admin
- group_ayto_user
- group_spai_admin
- group_spai_user
- group_padron_admin
- group_padron_user
# Modo de visualización de la API: follow-privileges / ignore-privileges
openapi_mode: ignore-privileges
# Base de datos a crear para postgrest
postgrest_dbs:
- bbddunicarivas
# Estas bases de datos finalmente no se usan
# - terceros
# - territorios
# - empleados
# ---
# Rutas de api, y combinaciones de bbdd + schemas a las que dan acceso
# NOTA: el path "auth" está reservado para la base de datos de login.
# - Utilizando la ruta /api/{path}, se accede a la API de la base de datos.
#   se puede seleccionar un schema añadiendo las cabeceras Accept-Profile
#   o Content-Profile como se indica en la doc. de postgrest.
# - Utilizando la ruta /api/{path}/{schema}, nginx añade directamente esas
#   cabeceras, de forma que se pueda por ejemplo ver el swagger del schema
#   en esa ruta, sin necesidad de añadir la cabecera manualmente.
postgrest_alias:
- database: bbddunicarivas
  path: bbddunicarivas
  api_port: "3001"
  schemas:
  - bd_territorios
  - bd_terceros
  - bd_empleados
  - cat_territorios
  - cat_terceros
  - cat_empleados
  - cat_global
  - public
# Estas bases de datos finalmente no se usan
# - database: terceros
#   path: terceros
#   api_port: "3002"
#   schemas:
#   - public
# - database: territorios
#   path: territorios
#   api_port: "3003"
#   schemas:
#   - catalogos
#   - geo
#   - meta
# - database: empleados
#   path: empleados
#   api_port: "3004"
#   schemas:
#   - public
